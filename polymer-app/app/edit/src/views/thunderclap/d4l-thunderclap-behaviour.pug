link(rel="import" href="/bower_components/polymer/polymer.html")

script.
  window.D4L = window.D4L || {};
  window.D4L.Thunderclap = window.D4L.Thunderclap || {};

  /**
  * @polymerBehavior D4L.Thunderclap.Helpers
  */
  D4L.Thunderclap.Helpers = {
    behaviours: [
      Polymer.D4LViewList
    ],
    properties: {
      auth: {
        type: Object
      },

      __hasTwitterAuth: {
        type: Boolean,
        value: false,
        computed: 'hasTwitterAuth(auth.user, auth.user.auth.*)'
      }
    },

    subscribeThunderclap: function(ev) {
      const hasTwitterAuth = this.get('__hasTwitterAuth');
      const dialog       = this.$.dialog;
      const ajax         = this.$.ajax;
      const campaignId   = ev.detail.id;
      const campaignText = ev.detail.text;

      if (hasTwitterAuth) {
        dialog.setMetadata({
          'title': 'Subscribe to thunderclap',
          'description': 'Personalise the message that will be sent out as part of this Thunderclap',
          'action': 'Subscribe',
        });
        
        return dialog.openDialog(this.parseInputSchema({
          text: {
            label: 'Tweet',
            type: 'TEXTAREA',
            default: campaignText
          }
        }))
        .then(res => {
          const message = res.values.text;

          return ajax.send({
            url: '/api/v1/thunderclap/twitter/subscribe',
            method: 'PUT',
            contentType: 'application/json',
            body: {
              id: campaignId,
              message: message
            }
          });
        })
        .then(res => {
          console.log(res.response);
          //- TODO: Handle error & responce
        })
        .catch(err => this.__err(err))
      } else {
        dialog.setMetadata({
          'title': 'Login to Twitter',
          'description': 'You must be logged in with a Twitter account in order to subscribe.',
          'action': 'Cancel',
        });

        return dialog.openDialog(this.parseInputSchema({})).then(res => console.log(res));
      }
    },

    __presentIssueDialog(thunderclap, meta) {
      const dialog = this.$.dialog;

      const inputSchema = { 
        name: {
          label: 'Title',
          type: 'TEXT',
          default: thunderclap.name
        },
        description: {
          label: 'Description',
          type: 'TEXT',
          default: thunderclap.description
        },
        topicId: {
          label: 'Topic ID',
          type: 'TEXT',
          default: thunderclap.topicId
        },
        date: {
          label: 'Date',
          type: 'DATE',
          default: thunderclap.scheduledExecution
        },
        time: {
          label: 'Time',
          type: 'TIME',
          default: thunderclap.scheduledExecution
        },
      };

      dialog.setMetadata(meta);
      return dialog.openDialog(this.parseInputSchema(inputSchema));
    },

    addThunderclap(thunderclap) {
      const selectedItem = this.get('__selectedItem');
      if (!thunderclap) {
        thunderclap = this.get('db.Factory').create('thunderclap');
      }
      const dialog = this.$.dialog;

      const dialogMeta = {
        'title': 'Thunderclap',
        'description': 'Add a new thundeclap to the system',
        'action': 'Save',
      };
      
      return this.__presentIssueDialog(thunderclap, dialogMeta)
        .then((result) => {
          if (!result.values.name) {
            throw new Error('Thunderclap requires a name');
          }
          if (!result.values.description) {
            throw new Error('Thunderclap requires a description');
          }
          if (!result.values.date) {
            throw new Error('Thunderclap requires a date');
          }
          if (!result.values.time) {
            throw new Error('Thunderclap requires a time');
          }

          const date = Sugar.Date.create(`${result.values.date} ${result.values.time}`);
          if (!Sugar.Date.isValid(date)) {
            throw new Error('Invalid Date');
          }

          thunderclap.name = result.values.name;
          thunderclap.description = result.values.description;
          thunderclap.scheduledExecution = `${date}`;

          if (result.values.topicId) {
            thunderclap.topicId = result.values.topicId;
          }

          this.push('db.thunderclap.data', thunderclap);
        });
    },

  };