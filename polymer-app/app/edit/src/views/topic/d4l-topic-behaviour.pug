link(rel="import" href="/bower_components/polymer/polymer.html")

script.
  window.D4L = window.D4L || {};
  window.D4L.Topic = window.D4L.Topic || {};

  /**
  * @polymerBehavior D4L.Topic.Helpers
  */
  D4L.Topic.Helpers = {
    properties: {
    },

    viewTopicItem(ev) {
      this.viewTopic(ev.model.get('item.id'));
    },

    viewTopic(topicId) {
      this.fire('view-entity', `/topic/${topicId}`);
    },

    __presentTopicDialog(topic, meta) {
      const dialog = this.$.dialog;
      if (!this.$.dialog) throw new Error("Need a dialog with id: 'dialog'");

      const inputSchema = {
        name: {
          label: 'Title',
          type: 'TEXT',
          default: topic.name
        },
        description: {
          label: 'Description',
          type: 'TEXTAREA',
          default: topic.description
        },
        banner: {
          label: 'Banner Image',
          type: 'TEXT',
          default: topic.banner
        }
      };

      dialog.setMetadata(meta);
      return dialog.openDialog(this.parseInputSchema(inputSchema));
    },

    updateTopic(topic) {
      const selectedItem = this.get('__selectedItem');
      const dialogMeta = {
        'title': 'Topic',
        'description': 'Update this topic',
        'action': 'Update',
      };

      return this.__presentTopicDialog(topic, dialogMeta)
        .then((result) => {
          if (!result.values.name) {
            throw new Error('Topic requires a name');
          }

          const topics = this.get('db.topic.data');
          const topicIdx = topics.findIndex(t => t.id === topic.id);
          if (topicIdx === -1) {
            throw new Error('Invalid topic');
          }

          this.set(['db.topic.data', topicIdx, 'name'], result.values.name);
          this.set(['db.topic.data', topicIdx, 'description'], result.values.description);
          this.set(['db.topic.data', topicIdx, 'banner'], result.values.banner);

          if (selectedItem && selectedItem.id != topic.id) {
            this.set(['db.topic.data', topicIdx, 'parentId'], selectedItem.id);
          }
        });
    },

    addTopic() {
      const selectedItem = this.get('__selectedItem');
      const dbFactory = this.get('db.Factory');
      const dialogMeta = {
        'title': 'Topic',
        'description': 'Add a new topic to the system',
        'action': 'Add',
      };

      const topic = dbFactory.create('topic');
      return this.__presentTopicDialog(topic, dialogMeta)
        .then((result) => {
          if (!result.values.name) {
            throw new Error('Topic requires a name');
          }

          topic.name = result.values.name;
          topic.description = result.values.description;
          topic.banner = result.values.banner;

          if (selectedItem) {
            topic.parentId = selectedItem.id;
          }

          this.push('db.topic.data', topic);
        });
    },

    __computeIsTopicEditor(topic) {
      if (!topic) return false;

      const auth = this.get('auth');
      const isAdmin = this.inAuthRole(auth.token, 'admin.super');
      const isEditor = this.inAuthRole(auth.token, 'admin.editor');

      this.__silly(`__computeIsTopicEditor`, `isAdmin: ${isAdmin}`, `isEditor: ${isEditor}`, auth, topic);

      if (isAdmin === true) return true;
      if (isEditor === false) return false;

      const editorIds = topic.editorIds || [];
      return editorIds.indexOf(auth.user.id) !== -1;
    }
  };
