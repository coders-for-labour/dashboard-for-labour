link(rel="import" href="/bower_components/polymer/polymer.html")

script.
  window.D4L = window.D4L || {};
  window.D4L.Issue = window.D4L.Issue || {};

  /**
  * @polymerBehavior D4L.Issue.Helpers
  */
  D4L.Issue.Helpers = {
    properties: {
      
    },

    viewIssueItem(ev) {
      this.viewIssue(ev.model.get('item.id'));
    },
    viewIssue(issueId) {
      this.fire('view-entity', `/issue/${issueId}`);
    },

    __addIssue() {
      const selectedItem = this.get('__selectedItem');
      const dbFactory = this.get('db.Factory');
      const dialog = this.$.dialog;

      const issue = dbFactory.create('issue');

      const dialogInputs = {
        name: {
          label: 'Title',
          type: 'TEXT',
          default: issue.name
        },
        description: {
          label: 'Description',
          type: 'TEXTAREA',
          default: issue.description
        }
      };

      dialog.setMetadata({
        'title': 'Issue',
        'description': 'Add a new issue to the system',
        'action': 'Save',
      });
      
      return dialog.openDialog(this.parseInputSchema(dialogInputs))
        .then((result) => {
          if (!result.values.name) {
            throw new Error('Thunderclap requires a name');
          }

          issue.name = result.values.name;
          issue.description = result.values.description;

          if (selectedItem) {
            issue.topicId = selectedItem.id;
          }

          this.push('db.issue.data', issue);
        });
    },

  };
